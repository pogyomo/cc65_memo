MEMORY {
    # ---------------------------------------------------------------
    # iNES header
    # ---------------------------------------------------------------
    HEADER: start = $0000, size = $0010,         type = ro, file = "%O", fill = yes;


    # ---------------------------------------------------------------
    # wram
    #   $0000-$00ff : zeropage
    #   $0100-$01ff : cpu stack
    #   $0200-$02ff : cc65 argument stack
    #   $0400-$04ff : sprite oam buffer
    #   $0500-$07ff : bss, heap or etc
    # ---------------------------------------------------------------
    ZP:     start = $0000, size = $0100,         type = rw, file = "",               define = yes;
    STACK:  start = $0200, size = __STACKSIZE__, type = rw, file = "",               define = yes;
    OAMBUF: start = $0400, size = $0100,         type = rw, file = "",               define = yes;
    RAM:    start = $0500, size = $0300,         type = rw, file = "",               define = yes;


    # ---------------------------------------------------------------
    # rom
    # ---------------------------------------------------------------
    ROM:    start = $8000, size = $7ffa,         type = ro, file = "%O", fill = yes;
    VEC:    start = $fffa, size = $0006,         type = ro, file = "%O", fill = yes;


    # ---------------------------------------------------------------
    # chr
    # ---------------------------------------------------------------
    CHR:    start = $0000, size = $2000,         type = ro, file = "%O", fill = yes;
}

SEGMENTS {
    # ---------------------------------------------------------------
    # iNES header
    # ---------------------------------------------------------------
    HEADER:   load = HEADER, type = ro;


    # ---------------------------------------------------------------
    # chr segment
    # ---------------------------------------------------------------
    CHARS:    load = CHR,    type = ro;


    # ---------------------------------------------------------------
    # Standerd segment
    # ---------------------------------------------------------------
    # Segment that zeropage
    ZEROPAGE: load = ZP,     type = rw, define = yes;

    # Segment that bss
    BSS:      load = RAM,    type = rw, define = yes;

    # Segment that heap memory
    HEAP:     load = RAM,    type = rw, define = yes, optional = yes;

    # Segment that startup code will be stored
    STARTUP:  load = ROM,    type = ro, define = yes;

    # Segment that a code that will be called once to init the system will be stored
    # Usually constructor, destructor or interruptor code will be stored
    ONCE:     load = ROM,    type = ro, define = yes, optional = yes;
    
    # Segment that code will be stored
    CODE:     load = ROM,    type = ro, define = yes;

    # Segment that read/write data
    # This data will be copied to ram using copydata
    DATA:     load = ROM,    type = rw, define = yes,                 run = RAM;

    # Segment that read-only data
    RODATA:   load = ROM,    type = ro, define = yes;

    # Segment that vector info will be stored
    VECTORS:  load = VEC,    type = ro, define = yes;
}

FEATURES {
    CONDES: segment = RODATA,
            type    = 0,
            label   = __INIT_HANDLER_TABLE__,
            count   = __INIT_HANDLER_COUNT__;
    CONDES: segment = RODATA,
            type    = 1,
            label   = __END_HANDLER_TABLE__,
            count   = __END_HANDLER_COUNT__;
    CONDES: segment = RODATA,
            type    = 2,
            label   = __IRQ_HANDLER_TABLE__,
            count   = __IRQ_HANDLER_COUNT__;
    CONDES: segment = RODATA,
            type    = 3,
            label   = __NMI_HANDLER_TABLE__,
            count   = __NMI_HANDLER_COUNT__;
}

SYMBOLS {
    # Define the stack size for the application
    __STACKSIZE__: value = $0200, type = weak;

    # iNES header info
    NES_MAPPER:    value = $00,   type = export;
    NES_PRG_BANKS: value = $02,   type = export;
    NES_CHR_BANKS: value = $01,   type = export;
    NES_MIRRORING: value = $00,   type = export;
}
